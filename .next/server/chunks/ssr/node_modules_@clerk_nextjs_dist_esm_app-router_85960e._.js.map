{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hp/Documents/Medical-Supplies/medical_supplies/node_modules/%40clerk/nextjs/dist/esm/app-router/keyless-actions.js"],"sourcesContent":["\"use server\";\nimport { cookies, headers } from \"next/headers\";\nimport { redirect, RedirectType } from \"next/navigation\";\nimport { detectClerkMiddleware } from \"../server/headers-utils\";\nimport { getKeylessCookieName } from \"../server/keyless\";\nimport { canUseKeyless } from \"../utils/feature-flags\";\nasync function syncKeylessConfigAction(args) {\n  const { claimUrl, publishableKey, secretKey, returnUrl } = args;\n  const cookieStore = await cookies();\n  cookieStore.set(getKeylessCookieName(), JSON.stringify({ claimUrl, publishableKey, secretKey }), {\n    secure: true,\n    httpOnly: true\n  });\n  const request = new Request(\"https://placeholder.com\", { headers: await headers() });\n  if (detectClerkMiddleware(request)) {\n    redirect(`/clerk-sync-keyless?returnUrl=${returnUrl}`, RedirectType.replace);\n    return;\n  }\n  return;\n}\nasync function createOrReadKeylessAction() {\n  if (!canUseKeyless) {\n    return null;\n  }\n  const result = await import(\"../server/keyless-node.js\").then((m) => m.createOrReadKeyless());\n  if (!result) {\n    return null;\n  }\n  const { keylessLogger, createKeylessModeMessage } = await import(\"../server/keyless-log-cache.js\");\n  keylessLogger == null ? void 0 : keylessLogger.log({\n    cacheKey: result.publishableKey,\n    msg: createKeylessModeMessage(result)\n  });\n  const { claimUrl, publishableKey, secretKey, apiKeysUrl } = result;\n  void (await cookies()).set(getKeylessCookieName(), JSON.stringify({ claimUrl, publishableKey, secretKey }), {\n    secure: false,\n    httpOnly: false\n  });\n  return {\n    claimUrl,\n    publishableKey,\n    apiKeysUrl\n  };\n}\nasync function deleteKeylessAction() {\n  if (!canUseKeyless) {\n    return;\n  }\n  await import(\"../server/keyless-node.js\").then((m) => m.removeKeyless());\n  return;\n}\nexport {\n  createOrReadKeylessAction,\n  deleteKeylessAction,\n  syncKeylessConfigAction\n};\n"],"names":[],"mappings":";;;;;;;IAoDE;IACA;IACA","ignoreList":[0]}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hp/Documents/Medical-Supplies/medical_supplies/node_modules/%40clerk/nextjs/src/app-router/client/keyless-creator-reader.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\nimport type { NextClerkProviderProps } from '../../types';\nimport { createOrReadKeylessAction } from '../keyless-actions';\n\nexport const KeylessCreatorOrReader = (props: NextClerkProviderProps) => {\n  const { children } = props;\n  const [state, fetchKeys] = React.useActionState(createOrReadKeylessAction, null);\n  useEffect(() => {\n    React.startTransition(() => {\n      fetchKeys();\n    });\n  }, []);\n\n  if (!React.isValidElement(children)) {\n    return children;\n  }\n\n  return React.cloneElement(children, {\n    key: state?.publishableKey,\n    publishableKey: state?.publishableKey,\n    __internal_claimKeylessApplicationUrl: state?.claimUrl,\n    __internal_copyInstanceKeysUrl: state?.apiKeysUrl,\n    __internal_bypassMissingPublishableKey: true,\n  } as any);\n};\n"],"names":[],"mappings":";;;AAAA,OAAO,SAAS,iBAAiB;AAGjC,SAAS,iCAAiC;;;;AAEnC,MAAM,yBAAyB,CAAC,UAAkC;IACvE,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI;IACrB,MAAM,CAAC,OAAO,SAAS,CAAA,yMAAI,UAAA,CAAM,cAAA,yLAAe,4BAAA,EAA2B,IAAI;IAC/E,CAAA,GAAA,qMAAA,CAAA,YAAA,EAAU,MAAM;QACd,qMAAA,CAAA,UAAA,CAAM,eAAA,CAAgB,MAAM;YAC1B,UAAU;QACZ,CAAC;IACH,GAAG,CAAC,CAAC;IAEL,IAAI,uMAAC,UAAA,CAAM,cAAA,CAAe,QAAQ,GAAG;QACnC,OAAO;IACT;IAEA,6MAAO,UAAA,CAAM,YAAA,CAAa,UAAU;QAClC,KAAK,SAAA,OAAA,KAAA,IAAA,MAAO,cAAA;QACZ,gBAAgB,SAAA,OAAA,KAAA,IAAA,MAAO,cAAA;QACvB,uCAAuC,SAAA,OAAA,KAAA,IAAA,MAAO,QAAA;QAC9C,gCAAgC,SAAA,OAAA,KAAA,IAAA,MAAO,UAAA;QACvC,wCAAwC;IAC1C,CAAQ;AACV","ignoreList":[0]}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}